// This approach is correct but it's runtime is very high.
// So it produced TLE on leetcode.


class Solution {
    
    List<String> ans = new ArrayList<>();
    HashSet<String> set = new HashSet<>();
    
    void addWord(String word){
        if(set.contains(word)){
            return;
        }
        ans.add(word);
        set.add(word);
    }
    
    void isPresent(char[][] board, int i, int j, String word, int index){
        
        if(index >= word.length()){
            addWord(word);
            return;
        }
        
        char dummy = board[i][j];
        board[i][j] = '@';
        
        char ch = word.charAt(index);
        if(i+1 < board.length && board[i+1][j] == ch){
            isPresent(board, i+1, j, word, index+1);
        }
        
        if(i-1 >= 0 && board[i-1][j] == ch){
            isPresent(board, i-1, j, word, index+1);
        }
        
        if(j+1 < board[i].length && board[i][j+1] == ch){
            isPresent(board, i, j+1, word, index+1);
        }
        
        if(j-1 >= 0 && board[i][j-1] == ch){
            isPresent(board, i, j-1, word, index+1);
        }
        
        board[i][j] = dummy;
    }
    
    public List<String> findWords(char[][] board, String[] words) {
        
        for(int i=0; i < words.length; i++){
            String word = words[i];
            
            for(int j = 0; j < board.length; j++){
                for(int k = 0; k < board[0].length; k++){
                    if(board[j][k] == word.charAt(0)){
                        isPresent(board, j, k, word, 1);
                    }
                }
            }
        }
        return ans;
    }
}
