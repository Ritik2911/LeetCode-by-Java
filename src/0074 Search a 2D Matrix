class Solution {
    
    boolean binarySearch(int[][] matrix , int target, int row){
        int start = 0;
        int end = matrix[row].length-1;
        
        while(start <= end){
            
            int mid = start + ((end-start)/2);
            
            if(matrix[row][mid] == target){
                return true;
            }else if(matrix[row][mid] > target){
                end = mid-1;
            }else{
                start = mid+1;
            }
        }
        return false;
    }
    
    public boolean searchMatrix(int[][] matrix, int target) {
        
        int rC = matrix.length;
        int cC = matrix[0].length;
        
        if(target >= matrix[rC-1][0]){
            return binarySearch(matrix,target,rC-1);
            
        }else{
            
            int start = 0;
            int end = rC-1;
            
            while(start <= end){
                int mid = start + (end-start)/2;
                
                if(matrix[mid][0] > target){
                    
                    if(mid-1 >= 0 && matrix[mid-1][0] <= target){
                        return binarySearch(matrix,target,mid-1);
                    }else{
                        end = mid-1;
                    }
                    
                }else{
                    
                    if( mid+1 < rC && matrix[mid+1][0] > target ){
                        return binarySearch(matrix,target,mid);
                    }else{
                        start = mid+1;
                    }
                    
                }
            }
        }
        
        return false;
        
    }
}
